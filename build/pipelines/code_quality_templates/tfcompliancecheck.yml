steps:
  - task: qetza.replacetokens.replacetokens-task.replacetokens@5
    condition: succeededOrFailed()
    displayName: "Replace variablised versions in terraform"
    enabled: true
    name: "Terraform_Version_replacement"
    inputs:
      rootDirectory: '$(System.DefaultWorkingDirectory)/repo_template/build/terraform'
      targetFiles: '**/*.tf'
      encoding: 'auto'
      tokenPattern: 'rm'
      writeBOM: true
      escapeType: 'none'
      actionOnMissing: 'fail'
      keepToken: true
      actionOnNoFiles: 'warn'
      enableTransforms: false
      enableRecursion: false
      useLegacyPattern: false
      enableTelemetry: true
  
  - task: terraformInstaller@0
    condition: succeededOrFailed()
    displayName: 'Install terraform version 1.2.2'
    enabled: true
    inputs:
      terraformVersion: '$(terraform_installer_version)'

  - script: |
      terraform init \
        -backend-config="resource_group_name=$(resource-group)" \
        -backend-config="storage_account_name=$(storage-account)" \
        -backend-config="container_name=$(container-name)" \
        -backend-config="key=$(state-key)" \
        -backend-config="access_key=$(access-key)"
    condition: succeeded()
    displayName: 'terraform init'
    enabled: true
    workingDirectory: "repo_template/build/terraform"

  - script: |
      terraform validate
    workingDirectory: "repo_template/build/terraform"
    condition: succeeded()
    displayName: "terraform validate"
    enabled: true
    name: "terraform_validate"

  - script: |
      terraform show -json plan_$(environment_tag) > plan_$(environment_tag).json
    workingDirectory: "repo_template/build/terraform"
    condition: succeeded()
    displayName: "terraform plan json"
    enabled: true
    name: "terraform_plan_json"

  # NOTE: have to run scan twice, once to receive the output (which does not show in terminal), and a second time for terminal display
  - script: |
      mkdir terraformComplianceReport
      docker pull eerkunt/terraform-compliance:latest
      docker run \
      --volume $(pwd):/target \
      --name TFComply \
      --interactive eerkunt/terraform-compliance:latest \
      --with-coverage \
      --cover-html TFCompliance-coverage-$(environment_tag).html \
      --cucumber-json TFCompliance-cucumber-$(environment_tag).json \
      --junit-xml TFCompliance-Report-$(environment_tag).xml \
      --features git:https://github.com/terraform-compliance/user-friendly-features.git \
      --planfile plan_$(environment_tag).json
      TFCompSuccess=$?
      docker cp TFComply:/target/TFCompliance-*.* $(System.DefaultWorkingDirectory)/terraformComplianceReport
      exit $TFCompSuccess
    condition: succeededOrFailed()
    displayName: "terraform Compliance Check"
    enabled: true
    name: "terraformCompliance"
    workingDirectory: "$(System.DefaultWorkingDirectory)"

  # Create work items to review failures
  - task: CreateWorkItem@1
    condition: failed()
    displayName: 'Create work item'
    enabled: true
    inputs:
      #teamProject: # Optional
      workItemType: 'Product Backlog Item'
      title: 'Review terraform Compliance Check failures for $(project_repo) repository'
      #assignedTo: # Optional
      #areaPath: # Optional
      #iterationPath: # Optional
      fieldMappings: "Description=Please review the attached files and linked build" # Optional; Required if your process defines additional required work item fields
      associate: true # Optional
      associationType: 'foundinbuild' # Optional; Valid values: build, integratedInBuild, foundInBuild
      # ===== Linking Inputs =====
      #linkWorkItems: false # Optional
      #linkType: # Required if linkWorkItems = true
      #linkTarget: id # Optional; Valid values: id, wiql
      #targetId: # Required if linkWorkItems = true and linkTarget = id
      #targetWiql: # Required if linkWorkItems = true and linkTarget = wiql
      limitWorkItemLinksToSameProject: true # Optional
      linkPR: true # Optional
      #linkCode: true # Optional
      #commitsAndChangesets: # Required if linkCode = true
      # ===== Attachments Inputs =====
      addAttachments: true # Optional
      attachmentsFolder: "$(System.DefaultWorkingDirectory)/terraformComplianceReport/" # Optional
      attachments: '*.*' # Required if addAttachments = true
      # ===== Duplicate Inputs =====
      #preventDuplicates: false # Optional
      #keyFields: # Required if preventDuplicates = true
      #updateDuplicates: false # Optional
      #updateRules: # Optional
      # ===== Outputs Inputs =====
      #createOutputs: false # Optional
      #outputVariables: # Required if createOutputs = true
      # ===== Advanced Inputs =====
      #authToken: #Optional
      #allowRedirectDowngrade: false # Optional

  # NOTE: This does not work yet, as the output is not formatted correctly
  - task: PublishTestResults@2
    condition: succeededOrFailed()
    displayName: "Publish terraformCompliance Test Results"
    enabled: true
    name: "Publish_terraformCompliance_Test_Results"
    inputs:
      testResultsFormat: "JUnit" # Options JUnit, NUnit, VSTest, xUnit, cTest
      testResultsFiles: "**/*TFCompliance-Report-$(environment_tag).xml"
      searchFolder: "$(System.DefaultWorkingDirectory)/terraformComplianceReport"
      mergeTestResults: false
      testRunTitle: terraformCompliance Scan
      failTaskOnFailedTests: false
      publishRunAttachments: true

  # NOTE: Nothing to publish until outputs can be received
  - task: PublishBuildArtifacts@1
    condition: succeededOrFailed()
    displayName: "Publish terraformCompliance Report"
    enabled: true
    name: "Publish_terraformCompliance_Report"
    inputs:
      PathtoPublish: "$(System.DefaultWorkingDirectory)/terraformComplianceReport"
      ArtifactName: terraformComplianceReport-$(environment_tag)

  # Clean up any of the containers / images that were used for quality checks
  - bash: |
      docker rmi "eerkunt/terraform-compliance:latest" -f | true
    condition: succeededOrFailed()
    displayName: "Remove terraform Quality Check Docker Images"
    enabled: true
    name: "Remove_terraform_Quality_Check_Docker_Images"
    workingDirectory: "$(System.DefaultWorkingDirectory)"
    