steps:
  # install terrascan docker image, run scan and generate report in human,junit and sarif formats

  - task: Cache@2
    inputs:
      key: docker | "tenable/terrascan:latest"
      path: $(Pipeline.Workspace)/docker
      cacheHitVar: DOCKER_CACHE_HIT
    condition: succeededOrFailed()
    displayName: Cache Docker images
    enabled: true
    name: "cache_docker"

  - script: |
              docker load -i $(Pipeline.Workspace)/docker/cache.tar
    condition: and(not(canceled()), eq(variables.DOCKER_CACHE_HIT, 'true'))
    displayName: Restore Docker image
    enabled: true
    name: "load_dockercache"

  - script: |
      mkdir -p $(Pipeline.Workspace)/docker
      docker pull -q tenable/terrascan:latest
      docker save -o $(Pipeline.Workspace)/docker/cache.tar tenable/terrascan:latest
    condition: and(not(canceled()), or(failed(), ne(variables.DOCKER_CACHE_HIT, 'true')))
    displayName: Save Docker image
    enabled: true
    name: "save_dockerimage"  

  - script: |
      mkdir terrascanreports
      outputTypes=("human" "json" "junit-xml" "sarif" "yaml")

      for str in ${outputTypes[@]}; do
        
      if [[ "$str" == "human" ]]; then
        docker run \
          --volume $(pwd):/Repo \
          --volume $(pwd)/terrascanreports:/reports \
          --workdir /Repo \
          tenable/terrascan:latest \
          scan \
          --verbose \
          --show-passed \
          --log-output-dir /reports 
      elif [[ "$str" == "json" ]]; then
        docker run \
          --volume $(pwd):/Repo \
          --volume $(pwd)/terrascanreports:/reports \
          --workdir /Repo \
          tenable/terrascan:latest \
          scan \
          --verbose \
          --show-passed \
          --log-output-dir /reports \
          --output $str 
      elif [[ "$str" == "junit-xml" ]]; then
        docker run \
          --volume $(pwd):/Repo \
          --volume $(pwd)/terrascanreports:/reports \
          --workdir /Repo \
          tenable/terrascan:latest \
          scan \
          --verbose \
          --show-passed \
          --log-output-dir /reports \
          --output $str 
      elif [[ "$str" == "sarif" ]]; then
        docker run \
          --volume $(pwd):/Repo \
          --volume $(pwd)/terrascanreports:/reports \
          --workdir /Repo \
          tenable/terrascan:latest \
          scan \
          --verbose \
          --show-passed \
          --log-output-dir /reports \
          --output $str 
      elif [[ "$str" == "xml" ]]; then
        docker run \
          --volume $(pwd):/Repo \
          --volume $(pwd)/terrascanreports:/reports \
          --workdir /Repo \
          tenable/terrascan:latest \
          scan \
          --verbose \
          --show-passed \
          --log-output-dir /reports \
          --output $str 
      elif [[ "$str" == "yaml" ]]; then
        docker run \
          --volume $(pwd):/Repo \
          --volume $(pwd)/terrascanreports:/reports \
          --workdir /Repo \
          tenable/terrascan:latest \
          scan \
          --verbose \
          --show-passed \
          --log-output-dir /reports \
          --output $str 
      else
        echo "output type not known"
      fi
      done
    condition: succeededOrFailed()
    displayName: "tenable TerraScan Code Analysis"
    enabled: true
    name: "tenable_TerraScan_Code_Analysis"
    workingDirectory: "$(System.DefaultWorkingDirectory)"

  # Create work items to review failures
  - task: CreateWorkItem@1
    condition: failed()
    displayName: "Create work item"
    enabled: true
    inputs:
      #teamProject: # Optional
      workItemType: "Product Backlog Item"
      title: "Review TerraScan failures for $(project_repo) repository"
      #assignedTo: # Optional
      #areaPath: # Optional
      #iterationPath: # Optional
      fieldMappings: "Description=Please review the attached files and linked build" # Optional; Required if your process defines additional required work item fields
      associate: true # Optional
      associationType: "foundinbuild" # Optional; Valid values: build, integratedInBuild, foundInBuild
      # ===== Linking Inputs =====
      #linkWorkItems: false # Optional
      #linkType: # Required if linkWorkItems = true
      #linkTarget: id # Optional; Valid values: id, wiql
      #targetId: # Required if linkWorkItems = true and linkTarget = id
      #targetWiql: # Required if linkWorkItems = true and linkTarget = wiql
      limitWorkItemLinksToSameProject: true # Optional
      linkPR: true # Optional
      #linkCode: true # Optional
      #commitsAndChangesets: # Required if linkCode = true
      # ===== Attachments Inputs =====
      addAttachments: true # Optional
      attachmentsFolder: "$(System.DefaultWorkingDirectory)/terrascanreports/" # Optional
      attachments: "*.*" # Required if addAttachments = true
      # ===== Duplicate Inputs =====
      #preventDuplicates: false # Optional
      #keyFields: # Required if preventDuplicates = true
      #updateDuplicates: false # Optional
      #updateRules: # Optional
      # ===== Outputs Inputs =====
      #createOutputs: false # Optional
      #outputVariables: # Required if createOutputs = true
      # ===== Advanced Inputs =====
      #authToken: #Optional
      #allowRedirectDowngrade: false # Optional
      preventDuplicates: true
      keyFields: |
        System.AreaPath
        System.IterationPath
        System.Title 

  # Publish the TerraScan report as an artifact to Azure Pipelines
  - task: PublishBuildArtifacts@1
    condition: succeededOrFailed()
    displayName: "Publish Terrascan Reports"
    enabled: true
    name: "Publish_Terrascan_Reports"
    inputs:
      PathtoPublish: "$(System.DefaultWorkingDirectory)/terrascanreports"
      ArtifactName: TerrascanReport-$(environment_tag)

  #copy sarif files to sarif directory to avoid polluting CodeAnalysisLogs
  - task: Powershell@2
    condition: succeededOrFailed()
    displayName: "Copy Sarif Files"
    enabled: true
    inputs:
      targetType: "inline"
      script: |
        cd $(System.DefaultWorkingDirectory)/terrascanreports
        $files = dir
        mkdir sarif
        ForEach($file in $files)
        {
          if($file.extension.Contains("sarif"))
          {
              Copy-Item -Path $file.FullName -Destination sarif -Force
          }
          else
          {
              Write-output $file.FullName "does not need moving"
          }      
        }
      showWarnings: true
      pwsh: true
      workingDirectory: "$(System.DefaultWorkingDirectory)"

  #publish Terrascan Scan
  - task: PublishBuildArtifacts@1
    condition: succeededOrFailed()
    displayName: "Publish Terrascan Scan"
    enabled: true
    name: "Publish_Terrascan_scan"
    inputs:
      PathtoPublish: "$(System.DefaultWorkingDirectory)/terrascanreports/sarif"
      ArtifactName: "CodeAnalysisLogs"
      publishLocation: "container"

  # publish the test results
  - task: PublishTestResults@2
    condition: succeededOrFailed()
    displayName: "Publish Terrascan Test Results"
    enabled: true
    name: "Publish_Terrascan_Test_Results"
    inputs:
      testResultsFormat: "JUnit" # Options JUnit, NUnit, VSTest, xUnit, cTest
      testResultsFiles: "**/*TerraScan-Report-$(environment_tag).xml"
      searchFolder: "$(System.DefaultWorkingDirectory)/terrascanreports"
      mergeTestResults: false
      testRunTitle: "Terrascan Scan"
      failTaskOnFailedTests: false
      publishRunAttachments: true

  # Clean up any of the containers / images that were used for quality checks
  - bash: |
      docker rmi "tenable/terrascan:latest" -f | true
    condition: succeededOrFailed()
    displayName: "Remove terraform Quality Check Docker Images"
    enabled: true
    name: "Remove_terraform_Quality_Check_Docker_Images"
    workingDirectory: "$(System.DefaultWorkingDirectory)"
