##
## Run compliance checks on all PR builds
## Also run on all normal builds that aren't on the development or master/main branches
##
name: $(Date:yy)-$(Date:MM)-$(Date:dd).$(Rev:r)
pr:
  branches:
    include:
      - "*"
  paths:
    include:
      - "*"
trigger:
  batch: false
  branches:
    include:
      - "*"
    exclude:
      #remove/comment out any branches that aren't relevant.
      #Note: it is nice to keep development branches under a development folder and get developers to keep their own branches under a folder with their name to keep the branch view clean
      - main
      - master
      - development/development
      - development
      - dev
  paths:
    include:
      - "*"

stages:
  ## Automated dependency updater
  - stage: dependabot
    condition: succeededOrFailed()
    dependsOn:
    displayName: "run dependabot"
    jobs: 
      - job: dependabot
        timeoutInMinutes: 0
        variables:
          - name: system.debug
            value: true
          - name: agent.diagnostic
            value: true
          - template: iac_templates/variables.yml
            parameters:
              environmentTag: "dev"
        displayName: "dependabot"
        pool:
          vmImage: "ubuntu-latest"
        steps:
          - checkout: self
            persistCredentials: true
          - template: code_quality_templates/dependabot.yml

  ## Bit slow but lints everything and has an auto-fix option
  - stage: megalinter
    condition: succeededOrFailed()
    dependsOn:
    displayName: "run MegaLinter"
    jobs: 
      - job: megalinter
        timeoutInMinutes: 0
        variables:
          - name: system.debug
            value: true
          - name: agent.diagnostic
            value: true
          - template: iac_templates/variables.yml
            parameters:
              environmentTag: "dev"
        displayName: "MegaLinter"
        pool:
          vmImage: "ubuntu-latest"
        steps:
          - checkout: self
            persistCredentials: true
          - template: code_quality_templates/mega_linter.yml

  ## Open source software composition Analysis tool
  - stage: mend
    condition: succeededOrFailed()
    dependsOn:
    displayName: "run Mend Bolt"
    jobs: 
      - job: mend
        timeoutInMinutes: 0
        variables:
          - name: system.debug
            value: true
          - name: agent.diagnostic
            value: true
          - template: iac_templates/variables.yml
            parameters:
              environmentTag: "dev"
        displayName: "Mend Bolt"
        pool:
          vmImage: "ubuntu-latest"
        steps:
          - checkout: self
            persistCredentials: true
          - template: code_quality_templates/mend_bolt.yml

  ## Open source software composition Analysis tool
  - stage: owasp
    condition: succeededOrFailed()
    dependsOn:
    displayName: "run owasp"
    jobs: 
      - job: owasp
        timeoutInMinutes: 0
        variables:
          - name: system.debug
            value: true
          - name: agent.diagnostic
            value: true
          - template: iac_templates/variables.yml
            parameters:
              environmentTag: "dev"
        displayName: "owasp"
        pool:
          vmImage: "ubuntu-latest"
        steps:
          - checkout: self
            persistCredentials: true
          - template: code_quality_templates/owasp.yml

  ## Software composition Analysis tool
  - stage: sonar
    condition: succeededOrFailed()
    dependsOn:
    displayName: "run Sonar Cloud"
    jobs: 
      - job: sonar
        timeoutInMinutes: 0
        variables:
          - name: system.debug
            value: true
          - name: agent.diagnostic
            value: true
          - template: iac_templates/variables.yml
            parameters:
              environmentTag: "dev"
        displayName: "Sonar Cloud"
        pool:
          vmImage: "ubuntu-latest"
        steps:
          - checkout: self
            persistCredentials: true
          - template: code_quality_templates/sonar_cloud.yml

  ## a comprehensive security scanner. It is reliable, fast, extremely easy to use, and it works wherever you need it.
  - stage: trivy
    condition: succeededOrFailed()
    dependsOn:
    displayName: "run Trivy"
    jobs: 
      - job: trivy
        timeoutInMinutes: 0
        variables:
          - name: system.debug
            value: true
          - template: iac_templates/variables.yml
            parameters:
              environmentTag: "dev"
        displayName: "Trivy"
        pool:
          vmImage: "ubuntu-latest"
        steps:
          - checkout: self
            persistCredentials: true
          - template: code_quality_templates/trivy.yml
                  
#  # Creates backlog items for failed tests - do not enable without discussing with the product team
#  - stage: board_updater
#    condition: succeededOrFailed()
#    displayName: 'board_updater_dev'
#    jobs:
#    - deployment: env
#      environment: 'dev-plan'
#      timeoutInMinutes: 0
#      variables:
#        - name: system.debug
#          value: true
#        - template: iac_templates/variables.yml
#          parameters:
#            environmentTag: 'dev'
#      displayName: 'dev'
#      pool:
#        vmImage: 'ubuntu-latest'
#      strategy:
#        runOnce:
#          deploy:
#            steps:
#            - checkout: self
#              persistCredentials: true
#            - task: WorkItemUpdater@2
#              inputs:
#                workitemsSource: 'Build'
#                workItemType: 'Task,Bug'
#                updateAssignedTo: 'Never'
#                updateFields: 'Microsoft.VSTS.Build.IntegrationBuild,v$(Build.BuildNumber)'
